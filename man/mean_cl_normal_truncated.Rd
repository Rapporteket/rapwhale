% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ymse-funksjoner.R
\name{mean_cl_normal_truncated}
\alias{mean_cl_normal_truncated}
\title{Lag statistisk samandragsfunksjon med trunkerte grenser for konfidensintervall}
\usage{
mean_cl_normal_truncated(ymin = NA, ymax = NA)
}
\arguments{
\item{ymin}{Nedre grense for konfidensintervall. Standard verdi \code{NA}.}

\item{ymax}{Øvre grense for konfidensintervall. Standard verdi \code{NA}.}
}
\value{
Ein funksjon tilsvarande \code{\link[ggplot2:hmisc]{ggplot2::mean_cl_normal()}}, men der grensene for
konfidensintervallet vert trunkerte
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Lagar ein statistisk samandragsfunksjon tilsvarande
\code{\link[ggplot2:hmisc]{ggplot2::mean_cl_normal()}} der grensene for konfidensintervallet
vert trunkerte.
}
\details{
Tek inn ei nedre grense \code{ymin} og ei øvre grense \code{ymax} og gjev ut ein
funksjon tilsvarande \code{\link[ggplot2:hmisc]{ggplot2::mean_cl_normal()}} der grensene for
konfidensintervallet er trunkerte til desse verdiane.

Dersom \code{ymin} og/eller \code{ymax} er \code{NA}, vert ikkje tilhøyrande grenser
trunkerte.

Denne funksjonen kan nyttast til å laga trunkerte konfidensintervall
viss inndata har kjende nedre og/eller øvre verdigrenser.

Funksjonen er også laga for å brukast i \code{\link[ggplot2:stat_summary]{ggplot2::stat_summary()}}.
}
\examples{
# Pakke for å laga figurar
library(ggplot2)
library(tibble)

# Vektorar med eksempel på svar frå undersøkjing

# På ein skala frå 1-5, kor godt nøgd er du med x?
x = c(5, 5, 4, 5)
# På ein skala frå 1-5, kor godt nøgd er du med y?
y = c(1, 2, 1, 1)

mean_cl_normal(x)
mean_cl_normal_truncated(ymin = 1, ymax = 5)(x)

d = tibble(spm = rep(c("x", "y"), each = 4), verdi = c(x, y))
p = ggplot(d, aes(spm, verdi)) +
  geom_point(position = position_dodge2(width = 0.05))

p + stat_summary(fun.data = mean_cl_normal, size = 1, color = "red")
p + stat_summary(fun.data = mean_cl_normal_truncated(ymin = 1, ymax = 5), size = 1, color = "red")
}
