% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rapwhale_style.R
\name{rapwhale_style}
\alias{rapwhale_style}
\title{Rapwhale-kodestil}
\usage{
rapwhale_style(
  scope = "tokens",
  strict = TRUE,
  indent_by = 2,
  start_comments_with_one_space = FALSE,
  reindention = styler::tidyverse_reindention(),
  math_token_spacing = styler::tidyverse_math_token_spacing(),
  maks_blanke_linjer = 3L
)
}
\arguments{
\item{scope}{Omfanget av manipulasjon. Kan variera frå \code{"none"} (minst inngripande) til
\code{"tokens"} (mest inngripande). Sjå 'Details'.
Dette argumentet er ein tekststreng eller ein vektor av klassen \code{AsIs}.}

\item{strict}{Ein logisk verdi som indikerer om eit sett med strenge eller ikkje så strenge
transformasjonsfunksjonar skal returnerast.
Samanlikn funksjonane returnert med eller utan \code{strict = TRUE}.
Til dømes vil det med \code{strict = TRUE} tvingast eitt mellomrom etter ",",
og eitt linjeskift etter avsluttande krøllparentes.
Med \code{strict = FALSE} vil det leggjast til mellomrom og linjeskift viss det
ikkje finst, men ikkje endrast noko viss det finst fleire. Sjå Examples'.}

\item{indent_by}{Kor mange mellomrom med innrykk skal setjast inn etter operatorar som \code{(}.}

\item{start_comments_with_one_space}{Skal kommentarar starta med berre eitt mellomrom
(sjå \code{\link[styler:start_comments_with_space]{styler::start_comments_with_space()}}).}

\item{reindention}{Ei liste over parametrar for regex re-innrykk, mest føremålstenleg laga med
\code{\link[styler:reindention]{styler::specify_reindention()}}.}

\item{math_token_spacing}{Ei liste over parametrar som definerar mellomrom i kring matematiske teikn,
føremålstenleg laga med \code{\link[styler:math_token_spacing]{styler::specify_math_token_spacing()}}.}

\item{maks_blanke_linjer}{Eit heiltal med høgste tal på blanke linjer på rad som er tillatne i koden.
Standard er 3.}
}
\value{
Stilguide, ei liste med funksjonar og annan info,
til bruk ved formatering av kode med \code{styler}-pakken.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Formater kode etter Rapwhale-kodestilen.
}
\details{
Rapwhale-kodestilen er lik Tidyverse-stilen \code{\link[styler:tidyverse_style]{styler::tidyverse_style()}},
med ei lita endring:
Den brukar \code{=}-operatoren i staden for \verb{<-}-operatoren.

Fylgjande nivå for \code{scope} er tilgjengelege:
\itemize{
\item "none": Utfører ingen transformasjon.
\item "spaces": Manipulerar mellomrom mellom teikn på same linje.
\item "indention": Manipulerar innrykk, dvs. tal på mellomrom i starten av
kvar linje.
\item "line_breaks": Manipulerar linjeskift.
\item "tokens": Manipulerar tokens (symbol og teikn).
}

\code{scope} kan spesifiserast på to måtar:
\itemize{
\item Som ein tekststreng: I dette tilfellet er alle mindre inngripande
\code{scope}-nivå underforstått,
t.d. "line_breaks" inkluderar "indention" og "spaces".
Dette er kort og det ein oftast treng.
\item Som ein vektor av klassen \code{AsIs}:
Kvart nivå må listas opp eksplisitt ved å leggja eitt eller fleire nivå
inn i I().
}

Sjå 'Examples' for detaljar.
}
\examples{
library(styler)

style_text("call( 1)", style = rapwhale_style, scope = "spaces")
style_text("call( 1)", transformers = rapwhale_style(strict = TRUE))
style_text(c("ab = 3", "a  =3"),
  style = rapwhale_style,
  strict = FALSE
) # Tek vare på justering av "="
style_text(c("ab = 3", "a  =3"),
  style = rapwhale_style,
  strict = TRUE
) # Fjernar justering av "="

# Endrar linjeskift og symbol, men ikkje mellomrom
style_text(c("ab <- 3", "a =3"),
  style = rapwhale_style,
  strict = TRUE, scope = I(c("line_breaks", "tokens"))
)
}
